import {Component} from '@angular/core';
import {NgbActiveModal} from '@ng-bootstrap/ng-bootstrap';
import {PatientService} from '../../../../@core/services/patient.service';
import {ToasterService} from 'angular2-toaster';
import {Consultation, Patient} from '../../patient.model';
import {DatePipe} from '@angular/common';

@Component({
  selector: 'ngx-patient-invoice-modal',
  templateUrl: 'patient-invoice-modal.component.html',
})
export class PatientInvoiceModalComponent {

  confirmationLabel: string;
  modalHeader: string;
  modalContent: string;
  patient: Patient;
  consultation: Consultation;

  constructor(private activeModal: NgbActiveModal,
              private patientService: PatientService,
              private toasterService: ToasterService,
              private datepipe: DatePipe) {
  }

  closeModal() {
    this.activeModal.close(false);
  }

  public downloadInvoice(): void {

    this.patientService.downloadInvoice(this.patient._id, this.consultation.id)
      .subscribe(
        x => {
          const newBlob = new Blob([x], {type: 'application/pdf'});

          // IE doesn't allow using a blob object directly as link href
          // instead it is necessary to use msSaveOrOpenBlob
          if (window.navigator && window.navigator.msSaveOrOpenBlob) {
            window.navigator.msSaveOrOpenBlob(newBlob);
            return;
          }

          // For other browsers:
          // Create a link pointing to the ObjectURL containing the blob.
          const data = window.URL.createObjectURL(newBlob);

          const link = document.createElement('a');
          link.href = data;
          link.download = this.patient.lastName.toUpperCase()
            + '_' + this.patient.firstName.toLowerCase()
            + '_' + this.datepipe.transform(this.consultation.date, 'dd-MM-yyyy')
            + '.pdf';

          // this is necessary as link.click() does not work on the latest firefox
          link.dispatchEvent(new MouseEvent('click', {bubbles: true, cancelable: true, view: window}));

          setTimeout(function () {
            // For Firefox it is necessary to delay revoking the ObjectURL
            window.URL.revokeObjectURL(data);
            link.remove();
          }, 100);

          this.toasterService.pop('success', 'La facture a été générée et téléchargée');

        },
        error => {
          this.toasterService.pop('error', 'Impossible de télécharger la facture.', error.error.message);
        },
      );
  }
}
